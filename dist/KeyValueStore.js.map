{"version":3,"file":"KeyValueStore.js","sourceRoot":"","sources":["../L2-Lib/KeyValueStore.ts"],"names":[],"mappings":"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","sourcesContent":["export class KeyValueStore {\r\n\r\n    // todo: Have IndexDB backend with fallback to Browser local storage!\r\n    public static open<T>(storeName: string): <T>(keyName: string, value?: T) => Promise<T> {\r\n\r\n        let dbPromise = KeyValueStore.createDBAndStore(storeName);\r\n\r\n        // TODO: we can eventually use await on createDBAndStore if TS supports async on ES5/ES3  (I believe it already does..perhaps my TS version here is too low)\r\n\r\n        return <T>(keyName: string, value?: T): Promise<T> => {\r\n\r\n            return new Promise<T>((resolve, reject) => {\r\n\r\n                dbPromise.then(db => {\r\n\r\n                    if (value !== undefined) {\r\n\r\n                        KeyValueStore.setValue<T>(db, keyName, value).then(r => resolve(r)).catch(e => reject(e));;\r\n\r\n                    }\r\n                    else {\r\n\r\n                        KeyValueStore.getValue<T>(db, keyName).then(r => resolve(r)).catch(e => reject(e));\r\n\r\n                    }\r\n\r\n                }).catch(e => reject(e));\r\n\r\n            });\r\n\r\n\r\n        };\r\n\r\n\r\n    }\r\n\r\n    private static createDBAndStore(dbName: string): Promise<IDBDatabase> {\r\n\r\n        return new Promise<IDBDatabase>((resolve, reject) => {\r\n\r\n            var request = indexedDB.open(dbName, 1); // upgrades not currently supported because indexeddb is a stupid API\r\n\r\n            request.onerror = (event) => {\r\n                reject(event);\r\n\r\n            };\r\n\r\n            request.onsuccess = (event) => {\r\n                resolve(request.result);\r\n            };\r\n\r\n            request.onupgradeneeded = (event: any) => {\r\n                let db = event.target.result;\r\n\r\n                db.onerror = (event) => {\r\n                    reject(event);\r\n                };\r\n\r\n                let objectStore = db.createObjectStore(\"ConfigKey\", {});\r\n            };\r\n\r\n        });\r\n    }\r\n\r\n    private static getValue<T>(db: IDBDatabase, keyName: string): Promise<T> {\r\n        return new Promise<T>((resolve, reject) => {\r\n\r\n            let transaction = db.transaction([\"ConfigKey\"], \"readwrite\");\r\n            let objectStore: IDBObjectStore = transaction.objectStore(\"ConfigKey\");\r\n\r\n            let getRequest = objectStore.get(keyName);\r\n\r\n            transaction.onerror = (ev) => { reject(ev); };\r\n            getRequest.onerror = (ev) => { reject(ev); };\r\n\r\n            getRequest.onsuccess = (event: any) => { resolve(event.target.result); }\r\n\r\n        });\r\n\r\n    }\r\n\r\n    private static setValue<T>(db: IDBDatabase, keyName: string, value: T): Promise<T> {\r\n        return new Promise<T>((resolve, reject) => {\r\n\r\n            let transaction = db.transaction([\"ConfigKey\"], \"readwrite\");\r\n            let objectStore: IDBObjectStore = transaction.objectStore(\"ConfigKey\");\r\n\r\n            let putRequest = objectStore.put(value.toString(), keyName);\r\n\r\n            transaction.onerror = (ev) => { reject(ev); };\r\n            putRequest.onerror = (ev) => { reject(ev); };\r\n\r\n            putRequest.onsuccess = (event: any) => { resolve(event.target.result); }\r\n\r\n        });\r\n\r\n    }\r\n\r\n    // https://github.com/jakearchibald/idb-keyval/blob/master/idb-keyval.js\r\n           /*\r\n        return withStore('readonly', function (store) {\r\n            // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\r\n            // And openKeyCursor isn't supported by Safari.\r\n            (store.openKeyCursor || store.openCursor).call(store).onsuccess = function () {\r\n                if (!this.result) return;\r\n                keys.push(this.result.key);\r\n                this.result.continue();\r\n            };\r\n        }).then(function () {\r\n            return keys;\r\n            });\r\n\r\n\r\n    }\r\n        */\r\n\r\n\r\n}\r\n\r\n//export class KeyValueStoreKV {\r\n\r\n//    public key<T>(keyName: string, value?: T): T {\r\n//        return null;\r\n//    }\r\n\r\n//}\r\n/*\r\nKeyValueStore.open(\"MyStore\")<Date>(\"\").\r\nKeyValueStore.open(\"MyStore\").key(\"KeyName\");\r\nKeyValueStore.open(\"MyStore\").key<Date>(\"KeyName\");\r\nKeyValueStore.open(\"MyStore\").key<Date>(\"KeyName\", new Date());\r\n\r\n*/"]}