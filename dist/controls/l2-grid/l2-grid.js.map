{"version":3,"file":"l2-grid.js","sourceRoot":"","sources":["../../../L2-Lib/controls/l2-grid/l2-grid.ts"],"names":[],"mappings":"AAAA,+MAA+M;AAC/M,iDAAiD;AAEjD,yCAAyC;AAGzC,sCAAsC;AACtC,+BAA+B;AAC/B,sCAAsC;AACtC,wCAAwC;AAGxC,KAAK;AAGL,0CAA0C;AAC1C,iHAAiH;AACjH,SAAS;AACT,KAAK;AAEL,gBAAgB;AAChB,kEAAkE;AAClE,sCAAsC;AACtC,sKAAsK;AAEtK,MAAM;AACN,uCAAuC;AACvC,sCAAsC;AACtC,wCAAwC;AAExC,gFAAgF;AAChF,SAAS;AACT,KAAK;AAGL,uCAAuC;AACvC,qEAAqE;AACrE,2EAA2E;AAE3E,8BAA8B;AAC9B,SAAS;AACT,KAAK;AAGL,0CAA0C;AAC1C,kCAAkC;AAElC,KAAK;AAEL,4BAA4B;AAE5B,gBAAgB;AAChB,4BAA4B;AAC5B,sIAAsI;AACtI,4CAA4C;AAC5C,wCAAwC;AACxC,uCAAuC;AACvC,uDAAuD;AACvD,MAAM;AACN,qDAAqD;AAErD,wCAAwC;AACxC,oCAAoC;AACpC,6CAA6C;AAC7C,6CAA6C;AAC7C,4CAA4C;AAC5C,oDAAoD;AAEpD,yDAAyD;AACzD,wDAAwD;AAExD,0DAA0D;AAE1D,iGAAiG;AACjG,kCAAkC;AAClC,mCAAmC;AACnC,SAAS;AAET,+FAA+F;AAC/F,6FAA6F;AAE7F,6CAA6C;AAE7C,oDAAoD;AACpD,mCAAmC;AACnC,aAAa;AACb,kBAAkB;AAClB,yCAAyC;AACzC,2DAA2D;AAE3D,sDAAsD;AACtD,aAAa;AACb,SAAS;AAET,kDAAkD;AAClD,sCAAsC;AACtC,SAAS;AAET,+CAA+C;AAE/C,gCAAgC;AAChC,kCAAkC;AAClC,uDAAuD;AACvD,aAAa;AACb,mCAAmC;AACnC,gFAAgF;AAChF,iCAAiC;AACjC,qDAAqD;AACrD,4CAA4C;AAC5C,iBAAiB;AACjB,sBAAsB;AACtB,0CAA0C;AAC1C,4CAA4C;AAC5C,iBAAiB;AACjB,wCAAwC;AAExC,sDAAsD;AAEtD,2BAA2B;AAC3B,wCAAwC;AACxC,wBAAwB;AACxB,eAAe;AACf,SAAS;AAET,oCAAoC;AACpC,qCAAqC;AACrC,SAAS;AAET,oBAAoB;AACpB,yEAAyE;AACzE,8BAA8B;AAC9B,uCAAuC;AACvC,2CAA2C;AAC3C,4CAA4C;AAC5C,iBAAiB;AAEjB,aAAa;AACb,SAAS;AAKT,sGAAsG;AAEtG,+GAA+G;AAC/G,SAAS;AAGT,4CAA4C;AAG5C,4DAA4D;AAC5D,gGAAgG;AAChG,SAAS;AAGT,8BAA8B;AAC9B,yIAAyI;AACzI,SAAS;AAET,2DAA2D;AAE3D,qCAAqC;AAErC,6CAA6C;AAC7C,4BAA4B;AAC5B,SAAS;AACT,KAAK","sourcesContent":["////import { Component, Input, Output, EventEmitter, Directive, QueryList, ContentChildren, AfterContentInit, ViewContainerRef, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\r\n////import { Observable } from 'rxjs/Observable';\r\n\r\n////import { jsDAL } from '../../L2.DAL';\r\n\r\n\r\n////@Directive({ selector: 'column' })\r\n////export class L2GridColumn {\r\n////    @Input() bound: string = null;\r\n////    @Input() display: string = null;\r\n\r\n\r\n////}\r\n\r\n \r\n////export class L2GridTemplateColumnRow {\r\n////    constructor(/*public $implicit: anypublic $implicit: any, public index: number, public count: number*/) {\r\n////    }\r\n////}\r\n\r\n////@Directive({\r\n////    selector: '[templatecolumn]', //inputs: [ 'row', 'index' ]\r\n////    inputs: [ 'bound', 'display'],\r\n////    providers: [{ provide: L2GridColumn, useExisting: L2GridTemplateColumn }] // 'cheat' so that  @ContentChildren(L2GridColumn) picks up this column type as well\r\n\r\n////})\r\n////export class L2GridTemplateColumn {\r\n////    @Input() bound: string = null;\r\n////    @Input() display: string = null;\r\n\r\n////    constructor(private templateRef: TemplateRef<L2GridTemplateColumnRow>) {\r\n////    }\r\n////}\r\n\r\n\r\n////@Directive({ selector: 'columns' })\r\n////export class L2GridColumnCollection implements AfterContentInit {\r\n////    @ContentChildren(L2GridColumn) columnList: QueryList<L2GridColumn>;\r\n\r\n////    ngAfterContentInit() {\r\n////    }\r\n////}\r\n\r\n\r\n////@Directive({ selector: 'no-results' })\r\n////export class L2GridNoResults {\r\n\r\n////}\r\n\r\n////declare var require:any;\r\n\r\n////@Component({\r\n////    selector: 'l2-grid',\r\n////    template: require('./l2-grid.html'), // temporary solution until I figure out how to compile and package this project properly\r\n////    styles: [ require('./l2-grid.css')],\r\n////    //templateUrl: './l2-grid.html',\r\n////    //styleUrls: ['./l2-grid.css'],\r\n////    changeDetection: ChangeDetectionStrategy.OnPush\r\n////})\r\n////export class L2Grid implements AfterContentInit {\r\n\r\n////    private _dataSource: any = null;\r\n////    private _sproc: jsDAL.Sproc;\r\n////    private isDataBound: boolean = false;\r\n////    private _autoExecute: boolean = true;\r\n////    private _isLoading: boolean = false;\r\n////    private _lastDurationInMilliseconds: number;\r\n\r\n////    @Input() public showHeaderStats: boolean = false;\r\n////    @Input() public showFooterStats: boolean = true;\r\n\r\n////    get dataSource(): any { return this._dataSource; }\r\n\r\n////    set isLoading(v: boolean) { this._isLoading = v; this.changeDetectorRef.markForCheck(); }\r\n////    get isLoading(): boolean {\r\n////        return this._isLoading;\r\n////    }\r\n\r\n////    set lastDurationInMilliseconds(val: number) { this._lastDurationInMilliseconds = val; }\r\n////    get lastDurationInMilliseconds(): number { return this._lastDurationInMilliseconds; }\r\n\r\n////    @Input() set dataSource(value: any) {\r\n\r\n////        if (jsDAL.Sproc.looksLikeADuck(value)) {\r\n////            this.sproc = value;\r\n////        }\r\n////        else {\r\n////            this._dataSource = value;\r\n////            if (value != null) this.isDataBound = true;\r\n\r\n////            this.changeDetectorRef.markForCheck();\r\n////        }\r\n////    }\r\n\r\n////    @Input() set autoExecute(value: boolean) {\r\n////        this._autoExecute = value;\r\n////    }\r\n\r\n////    private set sproc(value: jsDAL.Sproc) {\r\n\r\n////        this._sproc = value;\r\n////        if (!this.isLoading) {\r\n////            this.isLoading = this._sproc.isLoading;\r\n////        }\r\n////        this._sproc.then(r => {\r\n////            this.lastDurationInMilliseconds = this._sproc.lastExecutionTime;\r\n////            if (!r.Message) {\r\n////                this._dataSource = r.Data.Table0;\r\n////                this.isDataBound = true;\r\n////            }\r\n////            else {\r\n////                this._dataSource = [];\r\n////                this.isDataBound = true;\r\n////            }\r\n////            this._isLoading = false;\r\n\r\n////            this.changeDetectorRef.markForCheck();\r\n\r\n////        }).catch(e => {\r\n////            this._isLoading = false;\r\n////            throw e;\r\n////        });\r\n////    }\r\n\r\n////    get autoExecute(): boolean {\r\n////        return this._autoExecute;\r\n////    }\r\n\r\n////    ngOnInit() {\r\n////        // if we source our data from a Sproc rather than static data\r\n////        if (this._sproc) {\r\n////            if (this.autoExecute) {\r\n////                this._isLoading = true;\r\n////                this._sproc.ExecQuery();\r\n////            }\r\n\r\n////        }\r\n////    }\r\n\r\n\r\n\r\n\r\n////    @ContentChildren(L2GridColumnCollection) columnCollections: QueryList<L2GridColumnCollection>;\r\n\r\n////    constructor(private viewContainerRef: ViewContainerRef, private changeDetectorRef: ChangeDetectorRef) {\r\n////    }\r\n\r\n\r\n////    private getColumnNames(): string[] {\r\n        \r\n        \r\n////        if (this.columnCollections == null) return null;\r\n////        return this.columnCollections.first.columnList.map(c => c.display ? c.display : \"\");\r\n////    }\r\n\r\n\r\n////    ngAfterContentInit() {\r\n////        if (this.columnCollections && this.columnCollections.length > 1) throw new Error(\"You may have only one <columns> element.\");\r\n////    }\r\n\r\n////    private getFieldData(col: L2GridColumn, row: any) {\r\n\r\n////        var ret = row[col.bound];\r\n\r\n////        if (ret === undefined) return \"\";\r\n////        else return ret;\r\n////    }\r\n////}\r\n"]}