{"version":3,"file":"L2.DAL.js","sourceRoot":"","sources":["../L2-Lib/L2.DAL.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,MAAM,MAAM,CAAA;AAarB,IAAO,KAAK,CAsqBX;AAtqBD,WAAO,KAAK;IAER;QAAA;QAyBA,CAAC;QATU,gBAAS,GAAhB,UAAiB,OAA0B;YAEvC,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY,IAAI,EAAE,CAAC;gBAAC,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC;YAE5D,MAAM,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;YACrC,MAAM,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;YAC3C,MAAM,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;YACzB,MAAM,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC;QAC3D,CAAC;QACL,aAAC;IAAD,CAAC,AAzBD,IAyBC;IAzBY,YAAM,SAyBlB,CAAA;IASD,IAAK,eAOJ;IAPD,WAAK,eAAe;QAChB,2DAAW,CAAA;QACX,2DAAW,CAAA;QACX,4DAAY,CAAA;QACZ,8EAAqB,CAAA;QACrB,wDAAU,CAAA;QACV,gEAAc,CAAA;IAClB,CAAC,EAPI,eAAe,KAAf,eAAe,QAOnB;IAED;QAAA;QAKA,CAAC;QAAD,kBAAC;IAAD,CAAC,AALD,IAKC;IAED;QAAA;QAAkD,CAAC;QAAD,8BAAC;IAAD,CAAC,AAAnD,IAAmD;IAG7C,OAAQ,CAAC,SAAS,CAAC,MAAM,GAAG,UAAU,IAAI,EAAE,EAAE;QAChD,mCAAmC;QACnC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAA,CAAC;YACd,EAAE,CAAC,CAAC,IAAI,CAAC;gBAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI;gBAAC,MAAM,CAAC,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC,CAAA;IAcD,oBAAoB,YAAoB,EAAE,UAAU,EAAE,QAAgB,EAAE,MAAc,EAAE,OAAe,EACjG,YAAmB,EACnB,OAAwB,EACxB,SAAiC;QAInC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,kDAAkD;YAClD,IAAI,oBAAoB,GAAU,YAAY,CAAC,GAAG,CAAC,UAAA,CAAC;gBAChD,IAAI,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;gBAE3B,qDAAqD;gBACrD,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,WAAW,IAAI,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBAC/D,SAAS,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,WAAW,EAAE,CAAC;gBACjD,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,YAAY,IAAI,CAAC,CAAC,CAAC;oBACjC,SAAS,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;gBACxC,CAAC;gBAED,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC;oBAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,kBAAkB,CAAC,SAAS,CAAC,CAAA;gBACzF,IAAI;oBAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;YAC5C,CAAC,CAAC,CAAC;YAEH,IAAI,SAAS,GAAW,IAAI,CAAC;YAC7B,IAAI,aAAa,GAA8B,EAAE,CAAC;YAElD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACV,EAAE,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBAC3B,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;oBAEhC,wDAAwD;oBACxD,EAAE,CAAC,CAAC,SAAS,CAAC;wBAAC,oBAAoB,CAAC,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC,CAAC;gBACvE,CAAC;gBAED,wDAAwD;gBACxD,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;oBAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;gBAC7E,kFAAkF;gBAClF,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACnB,aAAa,CAAC,aAAa,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC;gBACpD,CAAC;YAEL,CAAC;YAED,IAAI,eAAe,GAAG,oBAAoB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAErD,EAAE,CAAC,CAAC,eAAe,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,IAAI,eAAe,IAAI,EAAE,CAAC;gBAAC,eAAe,GAAG,GAAG,GAAG,eAAe,CAAC;YACpH,IAAI;gBAAC,eAAe,GAAG,EAAE,CAAC;YAE1B,EAAE,CAAC,CAAC,MAAM,CAAC,kBAAkB,CAAC;gBAAC,QAAQ,GAAG,MAAM,CAAC,kBAAkB,CAAC;YAEpE,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/D,MAAM,IAAI,KAAK,CAAC,yCAAuC,YAAc,CAAC,CAAC;YAC3E,CAAC;YAED,MAAM;YACN,EAAE,CAAC,CAAC,UAAU,IAAI,KAAK,CAAC,CAAC,CAAC;gBACtB,IAAI,OAAO,GAAG,IAAI,CAAC;gBAEnB,EAAE,CAAC,CAAC,aAAa,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;oBACzD,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC;wBAAC,OAAO,GAAG,EAAE,CAAC;oBAClC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,aAAa,CAAC,CAAC,CAAC;wBAC1B,OAAO,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;oBAClC,CAAC;gBACL,CAAC;gBAED,IAAI,IAAI,GAAG,IAAI,CAAC;gBAEhB,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBACV,IAAI,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;gBAChC,CAAC;gBAED,SAAS,CAAI,MAAM,CAAC,SAAS,aAAQ,YAAY,SAAI,QAAQ,SAAI,MAAM,CAAC,YAAY,SAAI,MAAM,SAAI,OAAO,GAAG,eAAiB,EAAE,IAAI,EAAE,SAAS,CAAC;qBAC1I,IAAI,CAAC,UAAA,CAAC,IAAM,MAAM,CAAC,eAAe,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;qBAClD,IAAI,CAAC,SAAS,CAAC;qBACf,IAAI,CAAC,gBAAgB,CAAC;qBACtB,MAAM,CAAC,OAAO,CAAC,sBAAsB,EAAE,kBAAkB,CAAC;qBAC1D,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,OAAO,CAAC,CAAC,CAAC,EAAV,CAAU,CAAC,CACzB,OAAO,CAAC,CAAC,UAAA,CAAC,IAAM,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAC5D,OAAO,CAAC,CAAC,UAAU,CAAC;oBACjB,EAAE,CAAC,CAAC,CAAC,YAAY,uBAAuB,CAAC;wBAAC,MAAM,CAAC;oBACjD,IAAI;wBAAC,MAAM,CAAC,CAAC;gBACjB,CAAC,CAAC,CACG;YACT,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,IAAI,MAAM,CAAC,CAAC,CAAC;gBAC5B,IAAI,WAAW,GAAG,EAAE,CAAC;gBAErB,YAAY,CAAC,OAAO,CAAC,UAAA,CAAC,IAAM,WAAW,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAE5D,EAAE,CAAC,CAAC,SAAS,CAAC;oBAAC,WAAW,CAAC,WAAW,CAAC,GAAG,SAAS,CAAC;gBAEpD,IAAI,OAAO,GAAG;oBACV,QAAQ,EAAE,kBAAkB;oBAC5B,cAAc,EAAE,kBAAkB;iBACrC,CAAC;gBAEF,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,aAAa,CAAC,CAAC,CAAC;oBAC1B,OAAO,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;gBAClC,CAAC;gBAED,SAAS,CAAI,MAAM,CAAC,SAAS,aAAQ,YAAY,SAAI,QAAQ,SAAI,MAAM,CAAC,YAAY,SAAI,MAAM,SAAI,OAAS,EACrG;oBACE,MAAM,EAAE,MAAM;oBACd,OAAO,EAAE,OAAO;oBAChB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;iBACpC,EAAE,SAAS,CAAC;qBACZ,IAAI,CAAC,UAAA,CAAC,IAAM,MAAM,CAAC,eAAe,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;qBAClD,IAAI,CAAC,SAAS,CAAC;qBACf,IAAI,CAAC,gBAAgB,CAAC;qBACtB,MAAM,CAAC,OAAO,CAAC,sBAAsB,EAAE,kBAAkB,CAAC;qBAC1D,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,OAAO,CAAC,CAAC,CAAC,EAAV,CAAU,CAAC,CACzB,OAAO,CAAC,CAAC,UAAA,CAAC,IAAM,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAClD,OAAO,CAAC,CAAC,UAAU,CAAC;oBACjB,EAAE,CAAC,CAAC,CAAC,YAAY,uBAAuB,CAAC;wBAAC,MAAM,CAAC;oBACjD,IAAI;wBAAC,MAAM,CAAC,CAAC;gBACjB,CAAC,CAAC,CACG;YACT,CAAC;YACD,IAAI;gBAAC,MAAM,uBAAuB,GAAG,UAAU,CAAC;QAEpD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,mBAAmB,GAAqB,EAClC,IAAwB,EACxB,SAAiC;QAEnC,MAAM,CAAC,IAAI,OAAO,CAAW,UAAC,OAAO,EAAE,MAAM;YAEzC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;gBAE3B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;oBAAC,IAAI,GAAG,EAAE,CAAC;gBACrB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;oBAAC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;gBAErC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,YAAU,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,YAAc,CAAC;YAC9E,CAAC;YAGD,kCAAkC;YAClC,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;gBAAC,IAAI,GAAG,SAAS,CAAC;YAEnC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,CAAM;gBACzB,CAAC,CAAC,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;gBACnC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACX,MAAM,CAAC,CAAC,CAAC;YACb,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,UAAA,GAAG;gBACX,uFAAuF;gBACvF,GAAG,CAAC,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;gBACrC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACZ,MAAM,CAAC,GAAG,CAAC;YACf,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;gBACL,OAAO,CAAM,CAAC,CAAC,CAAC;gBAEhB,EAAE,CAAC,CAAC,SAAS,CAAC;oBAAC,mBAAmB,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;gBAEjD,MAAM,CAAC,CAAC,CAAC;YACb,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED,6BAA6B,MAAW,EAAE,SAAiC;QAA3E,iBAaC;QAXG,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC,CAAC;YAAC,MAAM,CAAC,MAAM,CAAC;QAEvD,SAAS,CAAC,OAAO,CAAC,UAAA,EAAE;YAEhB,EAAE,CAAC,CAAC,OAAO,EAAE,KAAK,UAAU,CAAC,CAAC,CAAC;gBAE3B,EAAE,CAAC,IAAI,CAAC,KAAI,EAAE,MAAM,CAAC,CAAC;gBACtB,SAAS;YACb,CAAC;QAEL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,0BAAiC,CAAC;QAE9B,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,WAAW,CAAC;YAAC,MAAM,CAAC,CAAC,CAAC;QAE9C,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAEnB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC;gBAAC,QAAQ,CAAC;YAE9C,IAAI,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAEnB,IAAI,WAAW,GAAG,EAAE,CAAC;YAErB,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC;gBAElD,IAAI,YAAY,GAAG,EAAE,CAAC;gBAEtB,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC;oBACzD,yCAAyC;oBACzC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;gBAChE,CAAC;gBAED,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACnC,CAAC;YAED,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC;QAC5B,CAAC;QAED,MAAM,CAAC,CAAC,CAAC;IACb,CAAC;IA5Be,sBAAgB,mBA4B/B,CAAA;IAED,yBAAyB,QAAwB,EAAE,OAAuB;QAEtE,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC;QACnC,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,QAAQ,CAAC;QACpB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAEvD,IAAI,cAAY,GAAW,IAAI,CAAC;YAEhC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC;gBAAC,cAAY,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAElE,yBAAyB;YACzB,EAAE,CAAC,CAAC,WAAW,IAAI,WAAW,CAAC,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChE,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,UAAU,IAAI;oBACtC,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,mBAAmB,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;oBAEpE,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;wBACtC,EAAE,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACxD,CAAC;oBAED,MAAM,IAAI,CAAC;gBACf,CAAC,CAAC,CAAC;YACP,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,UAAU,IAAI;oBACtC,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,sBAAsB,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;oBAE/D,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;wBACtC,EAAE,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,EAAE,oBAAoB,EAAE,KAAK,EAAE,cAAY,EAAE,CAAC,CAAC;oBAC/F,CAAC;oBAED,MAAM,QAAQ,CAAC;gBACnB,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC;IACL,CAAC;IAED,mBAAmB,QAAQ;QACvB,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,UAAC,IAAI;YAC7B,mEAAmE;YACnE,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,QAAQ,IAAU,IAAK,CAAC,UAAU,CAAC,GAAG,CAAC,IAAU,IAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACpH,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,oBAAoB,EAAO,EAAE,OAAuB;QAChD,0BAA0B;QAC1B,mBAAmB;QAEnB,EAAE,CAAC,CAAC,EAAE,YAAY,uBAAuB,CAAC,CAAC,CAAC;YACxC,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,GAAG;YACtB,6HAA6H;YAC7H,qFAAqF;YACrF,MAAM,EAAE,CAAC;QACb,CAAC;QAED,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,kBAAkB,CAAC,IAAI,WAAW,IAAI,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC1E,gKAAgK;YAEhK,IAAI,YAAY,GAAG,IAAI,CAAC;YAExB,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;gBAAC,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;YAEtD,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACtC,EAAE,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,MAAM,EAAE,YAAY,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,CAAC;YACrG,CAAC;YAED,IAAI,GAAG,GAAG,EAAE,CAAC;YAEb,EAAE,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC;gBAAC,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC;YAGjC,MAAM,CAAC,GAAG,CAAC;QACf,CAAC;QAED,MAAM,CAAC,EAAE,CAAC;IACd,CAAC;IAED,4BAA4B,IAAI;QAE5B,kDAAkD;QAClD,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC;YAE7E,IAAI,WAAW,GAAG,IAAI,CAAC;YAEvB,MAAM,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;gBACvB,KAAK,eAAe,CAAC,OAAO;oBACxB,MAAM,CAAC,WAAW,CAAC;gBACvB,KAAK,eAAe,CAAC,OAAO;oBACxB,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;oBAC7B,KAAK,CAAC;gBACV,KAAK,eAAe,CAAC,gBAAgB;oBACjC,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;oBACvD,MAAM,IAAI,uBAAuB,EAAE,CAAC;gBACxC,KAAK,eAAe,CAAC,SAAS;oBAC1B,EAAE,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;oBAChC,MAAM,IAAI,uBAAuB,EAAE,CAAC;YAC5C,CAAC;YAGD,MAAM,CAAC,WAAW,CAAC;QACvB,CAAC;QACD,IAAI,CAAC,CAAC;YACF,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;IAEL,CAAC;IAED;QAII;YAAY,kBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,6BAAoB;;YAC5B,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;gBACvB,MAAM,sDAAsD,CAAC;YACjE,CAAC;YAED,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC;gBACrB,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,YAAY,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACxC,MAAM,6CAA6C,CAAC;gBACxD,CAAC;YACL,CAAC;YAED,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;QAChC,CAAC;QAEM,yBAAS,GAAhB,UAAiB,OAAuC;YAAxD,iBAgEC;YA/DG,mBAAmB;YACnB,IAAI,QAAQ,GAAkB;gBAC1B,gBAAgB,EAAE,IAAI;gBACtB,sBAAsB,EAAE,IAAI;gBAC5B,gBAAgB,EAAE,IAAI;gBACtB,wBAAwB,EAAE,IAAI;gBAC9B,uBAAuB,EAAE,EAAE;aAC9B,CAAC;YAEF,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;YAExB,QAAQ,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAExC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBAE/B,IAAI,KAAK,GAAG,EAAE,CAAC;gBAEf,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,KAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC;oBAClD,IAAI,CAAC,GAAG,KAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;oBAE7B,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;gBACvD,CAAC;gBAED,kDAAkD;gBAClD,IAAI,uBAAuB,GAAU,EAAE,CAAC;gBAExC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACX,EAAE,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC;wBAC5B,IAAI,EAAE,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;wBAE7B,EAAE,CAAC,CAAC,EAAE,CAAC;4BAAC,uBAAuB,CAAC,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC,CAAC;oBAC5D,CAAC;gBACL,CAAC;gBAED,IAAI,eAAe,GAAG,uBAAuB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAExD,SAAS,CAAI,MAAM,CAAC,SAAS,6BAAwB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,iBAAY,eAAiB,CAAC;qBACnG,IAAI,CAAC,UAAA,CAAC,IAAM,MAAM,CAAC,eAAe,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;qBAClD,IAAI,CAAC,SAAS,CAAC;qBACf,IAAI,CAAC,gBAAgB,CAAC;qBACtB,MAAM,CAAC,OAAO,CAAC,sBAAsB,EAAE,kBAAkB,CAAC;qBAC1D,IAAI,CAAC,UAAA,CAAC;oBACH,iBAAiB;oBACjB,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,KAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC;wBAClD,IAAI,OAAO,GAAG,KAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;wBAEnC,IAAI,WAAW,GAAG,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;wBAE/C,IAAI,CAAC;4BACD,qCAAqC;4BACrC,kBAAkB,CAAC,WAAW,CAAC,CAAC;wBACpC,CAAC;wBACD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAuB,CAAC;wBAEpC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;oBAC1C,CAAC;gBAEL,CAAC,CAAC;qBACD,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,OAAO,CAAC,CAAC,CAAC,EAAV,CAAU,CAAC,CACzB,OAAO,CAAC,CAAC,UAAA,CAAC,IAAM,UAAU,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA,CAAC,CAAC,CAAC,CAChD;YAET,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,4BAAY,GAAnB,UAAoB,OAAa;YAC7B,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACL,YAAC;IAAD,CAAC,AAvFD,IAuFC;IAvFY,WAAK,QAuFjB,CAAA;IAED;QAKI;YAAA,iBAKC;YAJG,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBACvC,KAAI,CAAC,MAAM,GAAG,MAAM,CAAA;gBACpB,KAAI,CAAC,OAAO,GAAG,OAAO,CAAA;YAC1B,CAAC,CAAC,CAAA;QACN,CAAC;QACL,eAAC;IAAD,CAAC,AAXD,IAWC;IAXY,cAAQ,WAWpB,CAAA;IAED,UAAmB,4BAA4B;QA2D3C,eAAY,MAAc,EAAE,OAAe,EAAE,MAAiB,EAAE,OAAuB;YAtCvF,sCAAsC;YAC/B,aAAQ,GAAa,IAAI,CAAC;YAKzB,WAAM,GAAW,IAAI,CAAC;YACtB,YAAO,GAAW,IAAI,CAAC;YACvB,kBAAa,GAAa,IAAI,CAAC;YAOhC,cAAS,GAAY,KAAK,CAAC;YAwB9B,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;YAE/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;YAC5B,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC;QACtC,CAAC;QAxDa,qBAAe,GAA7B,UAA8B,GAAkB;YAC5C,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,KAAK,CAAC,YAAY,CAAC,CAAC;YAEzD,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC;gBACnB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;YACxC,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,KAAK,CAAC,YAAY,CAAC,CAAC;QACzD,CAAC;QAuBD,iFAAiF;QACnE,oBAAc,GAA5B,UAA6B,GAAQ;YACjC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;gBAAC,MAAM,CAAC,KAAK,CAAC;YACvB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,QAAQ,CAAC;QACjI,CAAC;QAEM,6BAAa,GAApB;YACI,MAAM,CAAC;gBACH,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,YAAY,EAAE,MAAM,CAAC,YAAY;gBACjC,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,MAAM,EAAE,IAAI,CAAC,kBAAkB;gBAC/B,OAAO,EAAE,IAAI,CAAC,eAAe;gBAC7B,QAAQ,EAAE,IAAI,CAAC,UAAU;aAC5B,CAAC;QACN,CAAC;QAWM,oBAAI,GAAX;YAAY,cAAO;iBAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;gBAAP,yBAAO;;YACf,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACzE,CAAC;QAEM,sBAAM,GAAb,UAAc,EAAmB;YAC7B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC;gBAAC,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;YAEvD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAE/B,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAES,oBAAI,GAAd,UAAe,YAAoB,EAAE,OAAuB;YAA5D,iBAoCC;YAlCG,EAAE,CAAC,CAAC,CAAC,YAAY,IAAI,YAAY,IAAI,EAAE,CAAC;gBACpC,MAAM,IAAI,KAAK,CAAC,yFAAyF,CAAC,CAAC;YAE/G,mBAAmB;YACnB,IAAI,QAAQ,GAAkB,KAAK,CAAC,YAAY,CAAC;YAEjD,IAAI,YAAY,GAAU,EAAE,CAAC;YAE7B,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;YACxB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,IAAI,EAAE,CAAC;YAGxD,OAAO,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;YACtD,QAAQ,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YACxC,0DAA0D;YAE1D,+CAA+C;YAC/C,gCAAgC;YAEhC,2EAA2E;YAC3E,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;gBAChC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,UAAA,QAAQ;oBAC7C,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,SAAS,CAAC;gBAC3C,CAAC,CAAC,CAAC;YACP,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC;gBAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC;YAClE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gBAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC;YAEzD,IAAI,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YAClC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YAEtB,MAAM,CAAC,UAAU,CAAC,YAAY,EAAE,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,IAAI,CAAC,gBAAgB,CAAC;iBACxI,IAAI,CAAC,UAAA,CAAC,IAAM,KAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC,KAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5I,CAAC;QAEM,yBAAS,GAAhB,UAAiB,OAAuB;YACpC,OAAO,GAAG,EAAE,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC,+BAA+B;YACpF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACtC,CAAC;QAEM,4BAAY,GAAnB,UAAoB,OAAuB;YACvC,OAAO,GAAG,EAAE,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC,mCAAmC;YACzF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACxC,CAAC;QAEM,gCAAgB,GAAvB,UAAwB,OAAuB;YAC3C,OAAO,GAAG,EAAE,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,EAAE,OAAO,CAAC,CAAC;YACpD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;gBAE1C,EAAE,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,WAAW,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC;oBAEjF,IAAI,EAAE,GAAG,IAAI,CAAC;oBACd,IAAI,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;oBAC5B,sDAAsD;oBACtD,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;wBAAC,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBAEpD,gCAAgC;oBAChC,OAAO,CAAC,CAAC,IAAI,CAAC;oBAEd,CAAC,CAAC,IAAI,GAAG,EAAE,WAAW,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;oBAEzC,MAAM,CAAC,CAAC,CAAC;gBACb,CAAC;gBAED,MAAM,CAAC,CAAC,CAAC;YAEb,CAAC,CAAC,CAAC;QACP,CAAC;QAGD,oBAAoB;QACpB,qCAAqC;QACrC,iCAAiC;QAC1B,sBAAM,GAAb;YAAc,oBAAyB;iBAAzB,UAAyB,EAAzB,qBAAyB,EAAzB,IAAyB;gBAAzB,+BAAyB;;YACnC,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,IAAI,IAAI,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC;YAE3C,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC5C,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAEM,uBAAO,GAAd,UAAe,oBAA4B;YACvC,IAAI,CAAC,UAAU,GAAG,oBAAoB,CAAC;YACvC,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAEL,YAAC;IAAD,CAAC,AAxKD;IAEmB,kBAAY,GAAkB;QACzC,gBAAgB,EAAE,IAAI;QACtB,sBAAsB,EAAE,IAAI;QAC5B,gBAAgB,EAAE,IAAI;QACtB,wBAAwB,EAAE,IAAI;QAC9B,uBAAuB,EAAE,EAAE;KAC9B,CAAC;IARO,WAAK,QAwKjB,CAAA;IAED;QAAyB,uBAAK;QAA9B;;QAQA,CAAC;QAPU,kBAAI,GAAX,UAAY,OAAuB;YAC/B,MAAM,CAAC,iBAAM,IAAI,YAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC;gBACvC,iCAAiC;gBACjC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;oBAAC,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;gBACtC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;YAClB,CAAC,CAAC,CAAC;QACP,CAAC;QACL,UAAC;IAAD,CAAC,AARD,CAAyB,KAAK,GAQ7B;IARY,SAAG,MAQf,CAAA;IAGD;QAAA;QAKA,CAAC;QAHG,sBAAW,2BAAQ;iBAAnB;gBACI,MAAM,CAAI,eAAe,CAAC,aAAa,qBAAkB,CAAC;YAC9D,CAAC;;;WAAA;QACL,sBAAC;IAAD,CAAC,AALD;IACmB,6BAAa,GAAW,SAAS,CAAC;IADxC,qBAAe,kBAK3B,CAAA;AACL,CAAC,EAtqBM,KAAK,KAAL,KAAK,QAsqBX;AAID,eAAe,KAAK,CAAC","sourcesContent":["import L2 from \"./L2\"\r\n\r\ninterface Error {\r\n    response: any;\r\n}\r\n\r\nexport interface JWT {\r\n    access_token?: string;\r\n    expires_in?: number;\r\n    token_type?: string;\r\n}\r\n\r\n\r\nmodule jsDAL {\r\n\r\n    export class Server {\r\n        //private static _serverUrl: string;\r\n        //private static _dbConnection: string;\r\n        // 30/08/2016, PL: IE8 does not support GET/SET properties\r\n        //static get serverUrl(): string {\r\n        //    return Server._serverUrl;\r\n        //}\r\n\r\n        //static get dbConnection(): string {\r\n        //    return Server._dbConnection;\r\n        //}\r\n        public static serverUrl: string;\r\n        public static dbConnection: string;\r\n        public static overridingDbSource: string;\r\n        public static jwt: JWT;\r\n\r\n        static configure(options: IDALServerOptions) {\r\n\r\n            if (options.dbConnection == \"\") options.dbConnection = null;\r\n\r\n            Server.serverUrl = options.serverUrl;\r\n            Server.dbConnection = options.dbConnection;\r\n            Server.jwt = options.jwt;\r\n            Server.overridingDbSource = options.overridingDbSource;\r\n        }\r\n    }\r\n\r\n    export interface IDALServerOptions {\r\n        serverUrl?: string;\r\n        dbConnection?: string;\r\n        overridingDbSource?: string;\r\n        jwt?: JWT;\r\n    }\r\n\r\n    enum ApiResponseType {\r\n        Unknown = 0,\r\n        Success = 1,\r\n        InfoMsg = 10,\r\n        ExclamationModal = 20,\r\n        Error = 30,\r\n        Exception = 40\r\n    }\r\n\r\n    class ApiResponse {\r\n        Message: string;\r\n        Title: string;\r\n        Type: ApiResponseType;\r\n        Data: any;\r\n    }\r\n\r\n    class ApiResponseEndThenChain { handled: boolean; }\r\n\r\n\r\n    (<any>Promise).prototype.ifthen = function (cond, cb) {\r\n        //if (cond) return this.then(cb);  \r\n        return this.then(r => {\r\n            if (cond) return cb(r);\r\n            else return r;\r\n        });\r\n    }\r\n\r\n    export interface IExecDefaults {\r\n        AutoSetTokenGuid?: boolean;\r\n        AutoProcessApiResponse?: boolean;\r\n        HandleExceptions?: boolean;\r\n        ShowPageLoadingIndicator?: boolean;\r\n        CommandTimeoutInSeconds?: number; // SQL Command timeout\r\n        $select?: string;\r\n        $captcha?: string;\r\n        HttpMethod?: string;\r\n    }\r\n\r\n\r\n    function ExecGlobal(execFunction: string, httpMethod, dbSource: string, schema: string, routine: string\r\n        , mappedParams: any[]\r\n        , options: (IExecDefaults)\r\n        , alwaysCBs?: ((res: any) => any)[]\r\n\r\n    ): Promise<any> {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            // create query string based on routine parameters\r\n            var parmQueryStringArray: any[] = mappedParams.map(p => {\r\n                var parmValue = options[p];\r\n\r\n                // serialize Date/moment objects to ISO string format\r\n                if (typeof (moment) != \"undefined\" && moment.isMoment(parmValue)) {\r\n                    parmValue = parmValue.toDate().toISOString();\r\n                }\r\n                else if (parmValue instanceof Date) {\r\n                    parmValue = parmValue.toISOString();\r\n                }\r\n\r\n                if (parmValue != null) return encodeURIComponent(p) + \"=\" + encodeURIComponent(parmValue)\r\n                else return encodeURIComponent(p) + \"=\";\r\n            });\r\n\r\n            let tokenGuid: string = null;\r\n            let customHeaders: { [key: string]: string } = {};\r\n\r\n            if (options) {\r\n                if (options.AutoSetTokenGuid) {\r\n                    tokenGuid = window[\"TokenGuid\"];\r\n\r\n                    // TODO: Consider moving this to the custom header array\r\n                    if (tokenGuid) parmQueryStringArray.push(\"tokenGuid=\" + tokenGuid);\r\n                }\r\n\r\n                // TODO: Consider moving this to the custom header array\r\n                if (options.$select) parmQueryStringArray.push(\"$select=\" + options.$select);\r\n                //if (options.$captcha) parmQueryStringArray.push(\"$captcha=\" + options.$captcha);\r\n                if (options.$captcha) {\r\n                    customHeaders[\"captcha-val\"] = options.$captcha;\r\n                }\r\n\r\n            }\r\n\r\n            var parmQueryString = parmQueryStringArray.join(\"&\");\r\n\r\n            if (parmQueryString && parmQueryString.length > 0 && parmQueryString != \"\") parmQueryString = \"?\" + parmQueryString;\r\n            else parmQueryString = \"\";\r\n\r\n            if (Server.overridingDbSource) dbSource = Server.overridingDbSource;\r\n\r\n            if ([\"exec\", \"execnq\", \"execScalar\"].indexOf(execFunction) == -1) {\r\n                throw new Error(`Invalid execution method specified: ${execFunction}`);\r\n            }\r\n\r\n            // GET\r\n            if (httpMethod == \"GET\") {\r\n                let headers = null;\r\n\r\n                if (customHeaders && Object.keys(customHeaders).length > 0) {\r\n                    if (headers == null) headers = {};\r\n                    for (let e in customHeaders) {\r\n                        headers[e] = customHeaders[e];\r\n                    }\r\n                }\r\n\r\n                let init = null;\r\n\r\n                if (headers) {\r\n                    init = { headers: headers };\r\n                }\r\n\r\n                fetchWrap(`${Server.serverUrl}/api/${execFunction}/${dbSource}/${Server.dbConnection}/${schema}/${routine}${parmQueryString}`, init, alwaysCBs)\r\n                    .then(r => { return checkHttpStatus(r, options); })\r\n                    .then(parseJSON)\r\n                    .then(transformResults)\r\n                    .ifthen(options.AutoProcessApiResponse, processApiResponse)\r\n                    .then(r => resolve(r))\r\n                [\"catch\"](r => { reject(fetchCatch(r, options)); return r; })\r\n                [\"catch\"](function (e) {\r\n                    if (e instanceof ApiResponseEndThenChain) return;\r\n                    else throw e;\r\n                })\r\n                    ;\r\n            }\r\n            else if (httpMethod == \"POST\") {\r\n                var bodyContent = {};\r\n\r\n                mappedParams.forEach(p => { bodyContent[p] = options[p]; });\r\n\r\n                if (tokenGuid) bodyContent[\"tokenGuid\"] = tokenGuid;\r\n\r\n                let headers = {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                };\r\n\r\n                for (let e in customHeaders) {\r\n                    headers[e] = customHeaders[e];\r\n                }\r\n\r\n                fetchWrap(`${Server.serverUrl}/api/${execFunction}/${dbSource}/${Server.dbConnection}/${schema}/${routine}`\r\n                    , {\r\n                        method: 'POST',\r\n                        headers: headers,\r\n                        body: JSON.stringify(bodyContent)\r\n                    }, alwaysCBs)\r\n                    .then(r => { return checkHttpStatus(r, options); })\r\n                    .then(parseJSON)\r\n                    .then(transformResults)\r\n                    .ifthen(options.AutoProcessApiResponse, processApiResponse)\r\n                    .then(r => resolve(r))\r\n                [\"catch\"](r => { reject(fetchCatch(r, options)); })\r\n                [\"catch\"](function (e) {\r\n                    if (e instanceof ApiResponseEndThenChain) return;\r\n                    else throw e;\r\n                })\r\n                    ;\r\n            }\r\n            else throw \"Invalid HTTP method: \" + httpMethod;\r\n\r\n        });\r\n    }\r\n\r\n    function fetchWrap(url: string | Request\r\n        , init?: RequestInit | any\r\n        , alwaysCBs?: ((res: any) => any)[]): any | Promise<Response> {\r\n\r\n        return new Promise<Response>((resolve, reject) => {\r\n\r\n            if (jsDAL.Server.jwt != null) {\r\n\r\n                if (!init) init = {};\r\n                if (!init.headers) init.headers = {};\r\n\r\n                init.headers[\"Authorization\"] = `Bearer ${jsDAL.Server.jwt.access_token}`;\r\n            }\r\n\r\n\r\n            // iOS prefers undefined over null\r\n            if (init == null) init = undefined;\r\n\r\n            fetch(url, init).then((r: any) => {\r\n                r.fetch = { url: url, init: init };\r\n                resolve(r);\r\n                return r;\r\n            })[\"catch\"](err => {\r\n                // TODO: Figure out what to do here...zonejs fucks up any chance of a meaningful error.\r\n                err.fetch = { url: url, init: init };\r\n                reject(err);\r\n                return err;\r\n            }).then(r => {\r\n                resolve(<any>r);\r\n\r\n                if (alwaysCBs) callAlwaysCallbacks(r, alwaysCBs);\r\n\r\n                return r;\r\n            });\r\n        });\r\n    }\r\n\r\n    function callAlwaysCallbacks(result: any, alwaysCBs?: ((res: any) => any)[]) {\r\n\r\n        if (!alwaysCBs || alwaysCBs.length == 0) return result;\r\n\r\n        alwaysCBs.forEach(cb => {\r\n\r\n            if (typeof cb === \"function\") {\r\n\r\n                cb.call(this, result);\r\n                //cb.call\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    export function transformResults(r) {\r\n\r\n        if (typeof (r.Data) === \"undefined\") return r;\r\n\r\n        for (var e in r.Data) {\r\n\r\n            if (!(e.substring(0, 5) == \"Table\")) continue;\r\n\r\n            var dt = r.Data[e];\r\n\r\n            var transformed = [];\r\n\r\n            for (var rowIx = 0; rowIx < dt.Data.length; rowIx++) {\r\n\r\n                var newRowObject = {};\r\n\r\n                for (var colIx = 0; colIx < dt.Data[rowIx].length; colIx++) {\r\n                    // TODO: Add support for DateTime fields?\r\n                    newRowObject[dt.Fields[colIx].name] = dt.Data[rowIx][colIx];\r\n                }\r\n\r\n                transformed.push(newRowObject);\r\n            }\r\n\r\n            r.Data[e] = transformed;\r\n        }\r\n\r\n        return r;\r\n    }\r\n\r\n    function checkHttpStatus(response: Response | any, options?: IExecDefaults): any {\r\n\r\n        response.hasReachedResponse = true;\r\n        if (response.status >= 200 && response.status < 300) {\r\n            return response;\r\n        } else {\r\n            var contentType = response.headers.get(\"content-type\");\r\n\r\n            let fetchDetails: string = null;\r\n\r\n            if (response.fetch) fetchDetails = JSON.stringify(response.fetch);\r\n\r\n            // look for a json result\r\n            if (contentType && contentType.indexOf(\"application/json\") !== -1) {\r\n                return response.json().then(function (json) {\r\n                    L2.exclamation(json.Message, \"Http status code \" + response.status);\r\n\r\n                    if (options && options.HandleExceptions) {\r\n                        L2.handleException(new Error(JSON.stringify(json)));\r\n                    }\r\n\r\n                    throw json;\r\n                });\r\n            } else {\r\n                return response.text().then(function (text) {\r\n                    L2.exclamation(text, \"Http status code 02 \" + response.status);\r\n\r\n                    if (options && options.HandleExceptions) {\r\n                        L2.handleException(new Error(text), { origin: \"checkHttpStatus 02\", fetch: fetchDetails });\r\n                    }\r\n\r\n                    throw response;\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    function parseJSON(response) {\r\n        return response.json().then((json) => {\r\n            // if still a string after parsing once and it *looks* like json...\r\n            if (typeof (json) === \"string\" && (<any>json).startsWith(\"{\") && (<any>json).endsWith(\"}\")) return JSON.parse(json);\r\n            return json;\r\n        });\r\n    }\r\n\r\n    function fetchCatch(ex: any, options?: IExecDefaults) {\r\n        //console.log(\"fetch...\");\r\n        //console.info(ex);\r\n\r\n        if (ex instanceof ApiResponseEndThenChain) {\r\n            ex.handled = true; //?\r\n            // handle special case where we just threw an exception(ApiResponseEndThenChain) to end any remaining 'thens' on the promise.\r\n            // we have to rethrow to prevent any additional '.then' callbacks from being executed\r\n            throw ex;\r\n        }\r\n\r\n        if (typeof (ex.hasReachedResponse) == \"undefined\" || !ex.hasReachedResponse) {\r\n            // we get here if no response was received from the fetch call, so the catch handler was called before checkHttpStatus. Mostly likely a network related problem.\r\n\r\n            var fetchDetails = null;\r\n\r\n            if (ex.fetch) fetchDetails = JSON.stringify(ex.fetch);\r\n\r\n            if (options && options.HandleExceptions) {\r\n                L2.handleException(new Error(JSON.stringify(ex)), { origin: \"fetchCatch\", fetch: fetchDetails });\r\n            }\r\n\r\n            var msg = ex;\r\n\r\n            if (ex.Message) msg = ex.Message;\r\n\r\n\r\n            return msg;\r\n        }\r\n\r\n        return ex;\r\n    }\r\n\r\n    function processApiResponse(json): Response {\r\n\r\n        // if the result is a string, test for ApiResponse\r\n        if (typeof (json) === \"object\" && typeof (json.ApiResponseVer) !== \"undefined\") {\r\n\r\n            let apiResponse = json;\r\n\r\n            switch (apiResponse.Type) {\r\n                case ApiResponseType.Success:\r\n                    return apiResponse;\r\n                case ApiResponseType.InfoMsg:\r\n                    L2.info(apiResponse.Message);\r\n                    break;\r\n                case ApiResponseType.ExclamationModal:\r\n                    L2.exclamation(apiResponse.Message, apiResponse.Title);\r\n                    throw new ApiResponseEndThenChain();\r\n                case ApiResponseType.Exception:\r\n                    L2.handleException(apiResponse);\r\n                    throw new ApiResponseEndThenChain();\r\n            }\r\n\r\n\r\n            return apiResponse;\r\n        }\r\n        else {\r\n            return json;\r\n        }\r\n\r\n    }\r\n\r\n    export class Batch {\r\n\r\n        private routineList: Sproc[];\r\n\r\n        constructor(...routines: Sproc[]) {\r\n            if (routines.length == 0) {\r\n                throw \"You have to specify at least one routine to execute.\";\r\n            }\r\n\r\n            for (var e in routines) {\r\n                if (!(routines[e] instanceof jsDAL.Sproc)) {\r\n                    throw \"All arguments must derive from jsDAL.Sproc.\";\r\n                }\r\n            }\r\n\r\n            this.routineList = routines;\r\n        }\r\n\r\n        public ExecQuery(options?: IExecDefaults & IExecDefaults): Promise<any> {\r\n            // default settings\r\n            let settings: IExecDefaults = {\r\n                AutoSetTokenGuid: true,\r\n                AutoProcessApiResponse: true,\r\n                HandleExceptions: true,\r\n                ShowPageLoadingIndicator: true,\r\n                CommandTimeoutInSeconds: 60\r\n            };\r\n\r\n            options = options || {};\r\n\r\n            settings = L2.extend(settings, options);\r\n\r\n            return new Promise((resolve, reject) => {\r\n\r\n                var batch = [];\r\n\r\n                for (var ix = 0; ix < this.routineList.length; ix++) {\r\n                    var r = this.routineList[ix];\r\n\r\n                    batch.push({ Ix: ix, Routine: r.getExecPacket() });\r\n                }\r\n\r\n                // create query string based on routine parameters\r\n                var optionsQueryStringArray: any[] = [];\r\n\r\n                if (settings) {\r\n                    if (settings.AutoSetTokenGuid) {\r\n                        var tg = window[\"TokenGuid\"];\r\n\r\n                        if (tg) optionsQueryStringArray.push(\"tokenGuid=\" + tg);\r\n                    }\r\n                }\r\n\r\n                var parmQueryString = optionsQueryStringArray.join(\"&\");\r\n\r\n                fetchWrap(`${Server.serverUrl}/api/execBatch?batch=${JSON.stringify(batch)}&options=${parmQueryString}`)\r\n                    .then(r => { return checkHttpStatus(r, options); })\r\n                    .then(parseJSON)\r\n                    .then(transformResults)\r\n                    .ifthen(options.AutoProcessApiResponse, processApiResponse)\r\n                    .then(r => {\r\n                        //console.dir(r);\r\n                        for (var ix = 0; ix < this.routineList.length; ix++) {\r\n                            var routine = this.routineList[ix];\r\n\r\n                            var transformed = transformResults(r.Data[ix]);\r\n\r\n                            try {\r\n                                //if (options.AutoProcessApiResponse)\r\n                                processApiResponse(transformed);\r\n                            }\r\n                            catch (ex) { /*ignore exceptions*/ }\r\n\r\n                            routine.deferred.resolve(transformed);\r\n                        }\r\n\r\n                    })\r\n                    .then(r => resolve(r))\r\n                [\"catch\"](r => { fetchCatch(r, options); reject(r) })\r\n                    ;\r\n\r\n            });\r\n        }\r\n\r\n        public ExecNonQuery(options?: any): Promise<any> {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    export class Deferred {\r\n        public promise: Promise<any>;\r\n        public resolve: (value?: any | PromiseLike<any>) => void;\r\n        public reject: (error?: any) => void;\r\n\r\n        constructor() {\r\n            this.promise = new Promise((resolve, reject) => {\r\n                this.reject = reject\r\n                this.resolve = resolve\r\n            })\r\n        }\r\n    }\r\n\r\n    export class Sproc /*implements Thenable<any>*/ {\r\n\r\n        private static _exeDefaults: IExecDefaults = {\r\n            AutoSetTokenGuid: true,\r\n            AutoProcessApiResponse: true,\r\n            HandleExceptions: true,\r\n            ShowPageLoadingIndicator: true,\r\n            CommandTimeoutInSeconds: 60\r\n        };\r\n\r\n        public static setExecDefaults(def: IExecDefaults) {\r\n            console.log(\"CURRENT exec defaults\", Sproc._exeDefaults);\r\n\r\n            for (var prop in def) {\r\n                this._exeDefaults[prop] = def[prop];\r\n            }\r\n\r\n            console.log(\"NEW exec defaults\", Sproc._exeDefaults);\r\n        }\r\n\r\n\r\n        // TODO: turn this into a GET property\r\n        public deferred: Deferred = null;\r\n\r\n        protected dbSource: string;\r\n        protected catalog: string;\r\n\r\n        private schema: string = null;\r\n        private routine: string = null;\r\n        private routineParams: string[] = null;\r\n        private constructorOptions: any;\r\n\r\n        private selectFieldsCsv: string;\r\n        private captchaVal: string;\r\n\r\n        public lastExecutionTime: number;\r\n        public isLoading: boolean = false;\r\n\r\n        private _alwaysCallbacks: ((res: any) => any)[];\r\n\r\n\r\n        // something in angular 2 seems to break the instanceof check...not sure what yet\r\n        public static looksLikeADuck(val: any): boolean {\r\n            if (!val) return false;\r\n            return typeof (val.ExecQuery) === \"function\" && typeof (val.routine) === \"string\" && typeof (val.routineParams) === \"object\";\r\n        }\r\n\r\n        public getExecPacket(): { dbSource: string, dbConnection: string, schema: string, routine: string, params: string[], $select: string, $captcha: string } {\r\n            return {\r\n                dbSource: this.dbSource,\r\n                dbConnection: Server.dbConnection,\r\n                schema: this.schema,\r\n                routine: this.routine,\r\n                params: this.constructorOptions,\r\n                $select: this.selectFieldsCsv,\r\n                $captcha: this.captchaVal\r\n            };\r\n        }\r\n\r\n        constructor(schema: string, routine: string, params?: string[], options?: IExecDefaults) {\r\n            this.deferred = new Deferred();\r\n\r\n            this.schema = schema;\r\n            this.routine = routine;\r\n            this.routineParams = params;\r\n            this.constructorOptions = options;\r\n        }\r\n\r\n        public then(...args) {\r\n            return this.deferred.promise.then.apply(this.deferred.promise, args);\r\n        }\r\n\r\n        public always(cb: (...any) => any): Sproc {\r\n            if (!this._alwaysCallbacks) this._alwaysCallbacks = [];\r\n\r\n            this._alwaysCallbacks.push(cb);\r\n\r\n            return this;\r\n        }\r\n\r\n        protected Exec(execFunction: string, options?: IExecDefaults): Promise<any> {\r\n\r\n            if (!execFunction || execFunction == \"\")\r\n                throw new Error(`'execFunction' must be specified. Consider using the methods ExecQuery or ExecNonQuery.`);\r\n\r\n            // default settings\r\n            let settings: IExecDefaults = Sproc._exeDefaults;\r\n\r\n            var mappedParams: any[] = [];\r\n\r\n            options = options || {};\r\n            this.constructorOptions = this.constructorOptions || {};\r\n\r\n\r\n            options = L2.extend(options, this.constructorOptions);\r\n            settings = L2.extend(settings, options);\r\n            // TODO: can we just assume TypeScript's __extends exists?\r\n\r\n            //?__extends(options, this.constructorOptions);\r\n            //?__extends(settings, options);\r\n\r\n            // look for parameters passed in that match the expected routine parameters\r\n            if (options && this.routineParams) {\r\n                mappedParams = this.routineParams.filter(parmName => {\r\n                    return options[parmName] !== undefined;\r\n                });\r\n            }\r\n\r\n            if (this.selectFieldsCsv) settings.$select = this.selectFieldsCsv;\r\n            if (this.captchaVal) settings.$captcha = this.captchaVal;\r\n\r\n            let startTick = performance.now();\r\n            this.isLoading = true;\r\n\r\n            return ExecGlobal(execFunction, settings.HttpMethod, this.dbSource, this.schema, this.routine, mappedParams, settings, this._alwaysCallbacks)\r\n                .then(r => { this.lastExecutionTime = performance.now() - startTick; this.isLoading = false; this.deferred.resolve(r); return r; });\r\n        }\r\n\r\n        public ExecQuery(options?: IExecDefaults): Promise<any> {\r\n            options = L2.extend({ HttpMethod: \"GET\" }, options); // default to GET for ExecQuery\r\n            return this.Exec(\"exec\", options);\r\n        }\r\n\r\n        public ExecNonQuery(options?: IExecDefaults): Promise<any> {\r\n            options = L2.extend({ HttpMethod: \"POST\" }, options); // default to POST for ExecNonQuery\r\n            return this.Exec(\"execnq\", options);\r\n        }\r\n\r\n        public ExecSingleResult(options?: IExecDefaults): Promise<any> {\r\n            options = L2.extend({ HttpMethod: \"GET\" }, options);\r\n            return this.Exec(\"execScalar\", options).then(r => {\r\n\r\n                if (r && typeof (r.Data) !== \"undefined\" && typeof (r.Data.Table0) !== \"undefined\") {\r\n\r\n                    var r1 = null;\r\n                    var op = r.Data.OutputParms;\r\n                    // take the first row of the first table in the result\r\n                    if (r.Data.Table0.length > 0) r1 = r.Data.Table0[0];\r\n\r\n                    // clean up existing Data object\r\n                    delete r.Data;\r\n\r\n                    r.Data = { OutputParms: op, Result: r1 };\r\n\r\n                    return r;\r\n                }\r\n\r\n                return r;\r\n\r\n            });\r\n        }\r\n\r\n\r\n        // Limits the return\r\n        // Tables are split by ; (semi-colon)\r\n        // Columns are split by , (comma)\r\n        public Select(...fieldNames: string[][]): Sproc {\r\n            if (fieldNames.length == null) return this;\r\n\r\n            this.selectFieldsCsv = fieldNames.join(\";\");\r\n            return this;\r\n        }\r\n\r\n        public captcha(captchaResponseValue: string): Sproc {\r\n            this.captchaVal = captchaResponseValue;\r\n            return this;\r\n        }\r\n\r\n    }\r\n\r\n    export class UDF extends Sproc {\r\n        public Exec(options?: IExecDefaults): Promise<any> {\r\n            return super.Exec(\"SCALAR\", options).then(r => {\r\n                // return the single result value\r\n                if (r.IsDate) return new Date(r.Data);\r\n                return r.Data;\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    export class ServerVariables {\r\n        private static PREFIX_MARKER: string = \"$jsDAL$\";\r\n        static get ClientIP(): string {\r\n            return `${ServerVariables.PREFIX_MARKER}.RemoteClient.IP`;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default jsDAL;"]}